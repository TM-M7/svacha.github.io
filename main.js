// --- –î–∞–Ω–Ω—ã–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º ---
const infoRU = [
  {emoji:"ü§ù", text:"–í—Ä—É—á–Ω—É—é –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∫–µ—Ç—ã ‚Äî —É—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å—ã, –Ω–æ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —á–µ–ª–æ–≤–µ–∫–∞."},
  {emoji:"üïØ", text:"–ö–∞–∂–¥—É—é –∞–Ω–∫–µ—Ç—É —Å–º–æ—Ç—Ä–∏—Ç –∂–∏–≤–æ–π –∫—É—Ä–∞—Ç–æ—Ä —Å –æ–ø—ã—Ç–æ–º"},
  {emoji:"üîÆ", text:"–ë–µ–∑ –±–∞–ª–ª–æ–≤ –∏ —Ñ–æ—Ä–º—É–ª ‚Äî —Ç–æ–ª—å–∫–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π, –¥—É—à–µ–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥."},
  {emoji:"üíå", text:"–ß—Ç–æ –ø–æ–ª—É—á–∏—Ç–µ: –ø–æ–¥–±–æ—Ä –ø–æ –¥—É—à–µ, —Å–æ–≤–µ—Ç—ã –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏ –≤—Å—Ç—Ä–µ—á–∏."},
  {emoji:"üÜì", text:"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–Ω–∫–µ—Ç–∞ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"},
  {emoji:"üí≥", text:"–ü–µ—Ä–µ–¥–∞—á–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ‚Äî –ø–ª–∞—Ç–Ω–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è)."}
];
const infoEN = [
  {emoji:"ü§ù", text:"Manual matching: we consider not only interests, but your vibe."},
  {emoji:"üïØ", text:"Every profile is reviewed by a real human curator."},
  {emoji:"üîÆ", text:"No points, no algorithms ‚Äî just a personal, soulful approach."},
  {emoji:"üíå", text:"What you get: true match, advice for chatting & meetings."},
  {emoji:"üÜì", text:"Registration & application are free!"},
  {emoji:"üí≥", text:"Contacts exchange is paid (only if you really want to connect)."}
];
const LEGAL = {
  ru: {title: '–°–≤–∞—Ö–∞ ‚Äî –∫–ª—É–± –∑–Ω–∞–∫–æ–º—Å—Ç–≤', age: '18+ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö', agree: '–ú–Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å 18 –ª–µ—Ç, —è —Å–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏', cta: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–Ω–∫–µ—Ç–µ', after: '–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –ø–ª–∞—Ç–∏—Ç–µ, –ø–æ–∫–∞ –Ω–µ —É–≤–∏–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!'},
  en: {title: 'Svacha ‚Äî matchmaking club', age: '18+ adults only', agree: "I'm 18+, I accept the rules", cta: 'Go to the profile', after: 'Go ahead ‚Äî you pay only if you see real results!'}
};

let lang = "ru";
function renderAll() {
  // –Ø–∑—ã–∫
  document.getElementById('mainTitle').textContent = LEGAL[lang].title;
  document.getElementById('ageNote').textContent = LEGAL[lang].age;
  document.getElementById('agreeText').textContent = LEGAL[lang].agree;
  document.getElementById('goBot').textContent = LEGAL[lang].cta;

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  const info = lang === "ru" ? infoRU : infoEN;
  const block = info.map(i=>`<div class="info-block"><span class="emoji">${i.emoji}</span>${i.text}</div>`).join('');
  document.getElementById('info-section').innerHTML = block;
}

renderAll();

// –Ø–∑—ã–∫–æ–≤–æ–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
document.getElementById('lang-ru').onclick = function(){
  lang = "ru";
  this.classList.add("lang-active");
  document.getElementById('lang-en').classList.remove("lang-active");
  renderAll();
};
document.getElementById('lang-en').onclick = function(){
  lang = "en";
  this.classList.add("lang-active");
  document.getElementById('lang-ru').classList.remove("lang-active");
  renderAll();
};

// –ß–µ–∫–±–æ–∫—Å –∏ –∫–Ω–æ–ø–∫–∞
function bindAgree() {
  const agree = document.getElementById('agree18');
  const btn = document.getElementById('goBot');
  const afterBtn = document.getElementById('afterBtn');
  btn.disabled = !agree.checked;
  agree.onchange = () => {
    btn.disabled = !agree.checked;
  };
  btn.onclick = () => {
    if (agree.checked) {
      btn.innerText = lang === 'en' ? "Opening Telegram..." : "–û—Ç–∫—Ä—ã–≤–∞–µ–º Telegram...";
      afterBtn.innerHTML = `<span>${LEGAL[lang].after}</span>`;
      setTimeout(() => window.open('https://t.me/svacha_bot', '_blank'), 400);
      setTimeout(() => { btn.innerText = LEGAL[lang].cta; afterBtn.innerHTML = ""; }, 3000);
    }
  };
}
bindAgree();


// ---- Magic Canvas: –¥—ã–º, –≤–æ–ª–Ω—ã, sparkles ----
const canvas = document.getElementById('fx-canvas');
const ctx = canvas.getContext('2d');
let w = window.innerWidth, h = window.innerHeight;
function resizeCanvas() {
  w = window.innerWidth; h = window.innerHeight;
  canvas.width = w; canvas.height = h;
}
window.addEventListener('resize', resizeCanvas); resizeCanvas();

const dots = Array.from({length: 23}).map(() => ({
  x: Math.random()*w, y: Math.random()*h,
  r: 1.3 + Math.random()*2.7,
  dx: (Math.random()-.5)*0.16, dy: (Math.random()-.5)*0.16,
  p: Math.random()*Math.PI*2
}));

let sparks = [];
canvas.addEventListener('pointermove', e => {
  sparks.push({x: e.clientX, y: e.clientY, t: performance.now()});
  if (sparks.length>12) sparks = sparks.slice(-12);
});
canvas.addEventListener('click', e => {
  sparks.push({x: e.clientX, y: e.clientY, t: performance.now()});
  if (sparks.length>12) sparks = sparks.slice(-12);
});

function waveY(x, t, offset) {
  return Math.sin(x/240 + t + offset)*16 +
         Math.sin(x/130 - t*0.8 - offset)*9 +
         Math.sin(x/80 + t*1.2 + offset)*6;
}

function draw(time) {
  ctx.clearRect(0,0,w,h);
  // –í–æ–ª–Ω—ã-–¥—ã–º
  ctx.save();
  for(let i=0; i<2; ++i){
    ctx.beginPath();
    ctx.moveTo(0, h/2+60+16*i);
    for(let x=0;x<w;x+=10){
      let y = h/2+60+16*i + waveY(x, time/1500, i*1.2);
      ctx.lineTo(x, y);
    }
    ctx.lineWidth = 33-i*8;
    ctx.globalAlpha = 0.09 + 0.06*i;
    ctx.strokeStyle = ['#bf35d6','#e694c7'][i];
    ctx.stroke();
  }
  ctx.globalAlpha = 1; ctx.restore();

  // –ü–∞—Ä—è—â–∏–µ —Ç–æ—á–∫–∏
  dots.forEach(d=>{
    d.x += d.dx; d.y += d.dy;
    d.x = (d.x+w)%w; d.y = (d.y+h)%h;
    let py = d.y + Math.sin(time/1100 + d.p)*2.5;
    ctx.beginPath();
    ctx.arc(d.x, py, d.r+Math.sin(time/1900+d.p)*1.2, 0, Math.PI*2);
    ctx.fillStyle = "rgba(255,255,255,0.09)";
    ctx.shadowColor = "#e694c7";
    ctx.shadowBlur = 11;
    ctx.fill(); ctx.shadowBlur = 0;
  });

  // –ú–∞–≥–∏—è –ø–æ –º—ã—à–∏/–∫–ª–∏–∫—É
  let now = performance.now();
  for(const sp of sparks){
    let age = (now-sp.t)/1100;
    if (age>1) continue;
    let r = 23 + 15*Math.sin((now-sp.t)/100);
    ctx.save();
    ctx.globalAlpha = 0.45-age*0.42;
    let g2 = ctx.createRadialGradient(sp.x, sp.y, 2, sp.x, sp.y, r);
    g2.addColorStop(0, "#fffbe9");
    g2.addColorStop(0.2, "#f84e6c");
    g2.addColorStop(1, "transparent");
    ctx.beginPath();
    ctx.arc(sp.x, sp.y, r, 0, Math.PI*2);
    ctx.closePath();
    ctx.fillStyle = g2;
    ctx.fill();
    ctx.restore();
  }
  requestAnimationFrame(draw);
}
draw(performance.now());
